{"version":3,"names":["Alert","constructor","nativeElement","delay","text","this","alertsDelay","alertsAnimation","alertsTimeout","alertsTimeoutDestroy","init","create","classList","add","style","transitionDuration","addEventListener","ev","destroy","bind","clearTimeout","setTimeout","container","document","querySelector","alertHTML","createElement","length","ulEl","forEach","txt","pEl","liEl","textContent","createTextNode","appendChild","remove","DragnDrop","MSG_DRAG","MSG_DROP","MSG_WARNING","MSG_ERROR","MSG_ALLOWED_TYPES","dragArea","dropArea","mediaContainer","dragText","input","submit","extensions","getAttribute","fileType","id","file","disabled","e","preventDefault","fileUpload","target","files","showFile","event","dataTransfer","name","split","pop","toLowerCase","replaceAll","includes","fileReader","FileReader","onload","result","click","readAsDataURL","JDSForm","element","hasWatchdog","formInitialized","formDisabled","reset","formChanged","jsonPopulatesIndex","formsMap","Map","selectGroups","selectGroupsValues","selects","alwaysDisabledOptions","formEls","virtualSelectConf","placeholder","noOptionsText","noSearchResultsText","searchPlaceholderText","allOptionsSelectedText","optionsSelectedText","optionSelectedText","moreText","emptyValue","search","disableSelectAll","silentInitialValueSet","autoSelectFirstOption","disableOptionGroupCheckbox","initRegularSelects","initJsonPopulators","querySelectorAll","onSelectChange","initSelectGroupWatchdog","console","log","setSelectedOptions","permaDisabledOptions","disabledItems","getDisabledOptions","targetGroup","groupArray","get","item","indexOf","push","set","setDisabledOptions","group","groupArrayValues","concat","getSelectedOptions","value","disOptions","i","setEnabledOptions","jsonElements","loadJson","initFormWatchdog","dataurl","elID","currentValue","lengthToWait","fetch","then","response","json","initJsonSelect","conf","Object","assign","ele","additionalClasses","VirtualSelect","jsonData","options","selectedValue","replace","watchdogEnabled","wdForm","formEl","tagName","checked","hasAttribute","fieldValid","label","contains","setElementCheck","eventTarg","currentTarget","resetRadioGroup","val","setElementChanged","unsetElementChanged","bindToDOMElement","scope","el","inputTarget","ajaxHandler","window","check","error","changeHandler","setAttribute","updateFormStatus","dispatchEvent","CustomEvent","detail","context","removeAttribute","status","containerpane","findParentContainer","parentNode","paneID","state","enableForm","enable","disableForm","disable","resetElement","form","setValue","resetToDefault","initForms","current_form","navigator","platform","match","metaKey","ctrlKey","keyCode","sendAjaxForm","formUnsaved","paneId","tab","pinForms","pinform","inputs","hasAutoFocus","key","focus","select","initFormOnShow","resetForms","page_id","initAdmin","handleCurrentActiveForm","async","newUrl","hash","url","history","replaceState","tabPaneID","tabPane","fetchDynamicExhibitionData","tabFormsCheck","forms","changed","statusChanged","checkForms","destinationTab","relatedTarget","createPhantomToggle","headline","message","func","CHANGED_FORM_MODAL","data","confirmLabel","handleLastActiveForm","confirmationModalEl","button","contextCancel","funcCancel","dataCancel","cancelLabel","modalTitle","modalBodyMessage","modalBtnConfirm","modalBtnCancel","innerHTML","defaultModalHandler","defaultModalCancelHandler","map","tooltipTriggerEl","Tooltip","html","initBSElements","location","href","triggerEl","Tab","show","scrollTo","rehashUrl","confirmationModal","btn_confirm","executeFunctionByName","hide","btn_cancel","functionName","args","Array","prototype","slice","call","arguments","namespaces","apply","resetFormModal","handleChangedFormModal","getElementById","Modal","targetElement","dynamicInit","pageToLock","_path","protocol","host","pathname","lockactionstatus","lockedBy","overlayCode","enableForms","overlay_container","pageToUnlock","isBlockedBy","blockedParam","phantomToggle"],"sources":["../../../src/js/components/Alert.js","../../../src/js/components/DragnDrop.js","../../../src/js/components/JDSForm.js","../../../src/js/controllers/forms.js","../../../src/js/admin.js"],"sourcesContent":["/**\n * Alert class for creating dynamic feedbacks via js (static feedbacks are created in PHP after saving pages)\n */\nexport default class Alert {\n\n    constructor(nativeElement, delay = 6, text = null) {\n\n        this.alertsDelay = delay; // in seconds\n        this.alertsAnimation = 0.3; // in seconds\n        this.alertsTimeout;\n        this.alertsTimeoutDestroy;\n        this.text = text;\n\n        this.nativeElement = nativeElement;\n        this.init();\n    }\n\n    init() {\n        if (this.text)\n            this.create();\n\n        // prepare transition IN\n        this.nativeElement.classList.add('showing');\n        this.nativeElement.style.transitionDuration = this.alertsAnimation + \"s\";\n\n        // prepare transition OUT when click\n        this.nativeElement.addEventListener('click', function (ev) {\n            this.destroy();\n        }.bind(this));\n\n        // prepare transition OUT\n        if (this.alertsTimeout)\n            clearTimeout(this.alertsTimeout);\n\n        this.alertsTimeout = setTimeout(() => {\n            this.destroy();\n        }, this.alertsDelay * 1000);\n    }\n\n    create() {\n        let container = document.querySelector('#wrapper .container');\n\n        let alertHTML = document.createElement(\"div\");\n        alertHTML.classList.add(\"alert\", 'position-fixed', 'auto');\n\n        if(this.text.length > 1){\n            let ulEl = document.createElement(\"ul\");            \n            this.text.forEach(txt => {       \n                let pEl =  document.createElement(\"p\");        \n                let liEl = document.createElement(\"li\");\n                let textContent = document.createTextNode(txt);\n                pEl.appendChild(textContent);\n                liEl.appendChild(pEl);\n                ulEl.appendChild(liEl);\n            });\n            alertHTML.appendChild(ulEl);\n        }\n        else{\n            let textContent = document.createTextNode(this.text);        \n            alertHTML.appendChild(textContent);\n        }\n        \n        container.appendChild(alertHTML);\n\n        this.nativeElement = alertHTML;\n    }\n\n    destroy() {\n        this.nativeElement.classList.remove('showing');\n\n        if (this.alertsTimeoutDestroy)\n            clearTimeout(this.alertsTimeoutDestroy);\n\n        this.alertsTimeoutDestroy = setTimeout(() => {\n            this.nativeElement.remove();\n        }, this.alertsAnimation * 1000);\n    }\n}\n\n\n","import Alert from \"./Alert\";\n\n/**\n * Drag n Drop Input Element for uploads\n */\nexport default class DragnDrop {\n\n    constructor(nativeElement) {\n\n        this.MSG_DRAG = 'Datei rein ziehen';\n        this.MSG_DROP = 'Los lassen';\n        this.MSG_WARNING = 'Maximal 1 Datei erlaubt';\n        this.MSG_ERROR = 'Dateityp nicht erlaubt: .';\n        this.MSG_ALLOWED_TYPES = \"Erlaubte Dateien: \";\n\n        this.nativeElement = nativeElement;\n\n        this.dragArea = this.nativeElement.querySelector(\".drag-area\");\n        this.dropArea = this.nativeElement.querySelector(\".drop-area\");\n        this.mediaContainer = this.dragArea.querySelector(\".media-container\");\n        this.dragText = this.dragArea.querySelector(\"header\");\n        this.input = this.dragArea.querySelector(\"input\");\n        this.submit = this.nativeElement.querySelector('button[type=\"submit\"]');\n        this.extensions = this.input.getAttribute('accept');\n        this.fileType = this.nativeElement.id;\n        this.file;\n\n        this.init();\n    }\n\n    init() {\n        this.submit.disabled = true;      \n        this.submit.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n\n            fileUpload(e);\n        }.bind(this));\n\n        this.input.addEventListener(\"change\", function (e) {\n            //getting user select file and [0] this means if user select multiple files then we'll select only the first one\n            this.file = e.target.files[0];\n            this.dropArea.classList.add(\"active\");\n            this.showFile(); //calling function\n        }.bind(this));\n\n        //If user Drag File Over dragArea\n        this.dragArea.addEventListener(\"dragover\", function (event) {\n            event.preventDefault(); //preventing from default behaviour\n            this.dropArea.classList.add(\"active\");\n            this.dragText.textContent = this.MSG_DROP;\n        }.bind(this));\n\n        //If user leave dragged File from dragArea\n        this.dragArea.addEventListener(\"dragleave\", function (event) {\n            this.dropArea.classList.remove(\"active\");\n            this.dragText.textContent = this.MSG_DRAG;\n        }.bind(this));\n\n        //If user drop File on dragArea\n        this.dragArea.addEventListener(\"drop\", function (event) {\n            event.preventDefault(); //preventing from default behaviour\n            this.dragText.textContent = this.MSG_DRAG;\n            this.dropArea.classList.remove(\"active\");\n\n            if (event.dataTransfer.files.length > 1) {\n                let alert = new Alert(null, 3, [this.MSG_WARNING]);\n            } else {\n                this.file = event.dataTransfer.files[0];\n                this.input.files = event.dataTransfer.files;\n                this.showFile(); //calling function                \n            }\n\n        }.bind(this));\n    }\n\n    showFile() {\n        let fileType = this.file.name.split('.').pop().toLowerCase(); //getting selected file extension\n        let validExtensions = this.extensions.replaceAll(' ', '').replaceAll('.', '').split(','); //adding valid image extensions in array from 'accept' string\n\n        if (validExtensions.includes(fileType)) { //if user selected file has valid type\n\n            this.submit.disabled = false;\n\n            let fileReader = new FileReader(); //creating new FileReader object\n            fileReader.onload = () => {\n                let fileURL = fileReader.result; //passing user file source in fileURL variable\n                let tag;\n                \n                if (this.fileType == 'exhibit_preview')\n                    //creating an img tag and passing user selected file source inside src attribute\n                    tag = `<img src=\"${fileURL}\" alt=\"image\">`;\n                else if (this.fileType == 'threed_model')\n                    //creating a model tag and passing user selected file source inside src attribute\n                    tag = `<model-viewer class=\"exhibit-3d\" id=\"reveal\" loading=\"eager\" camera-controls touch-action=\"pan-y\" interaction-prompt=\"none\" auto-rotate src=\"${fileURL}\" shadow-intensity=\"1\" style=\"background-color: unset;\"></model-viewer>`;\n                else if (this.fileType == 'digital_asset') {\n                    // creating video tag\n                    tag = `<video crossorigin class=\"vlite-js modal__video\" src=\"\"></video>`;\n                }\n\n                this.submit.click();\n            }\n            fileReader.readAsDataURL(this.file);\n        } else {\n            let warningFileExt = new Alert(null, 10, [this.MSG_ERROR + fileType, this.MSG_ALLOWED_TYPES + this.extensions]);\n            this.dropArea.classList.remove(\"active\");\n            this.dragText.textContent = this.MSG_DRAG;\n        }\n    }\n}\n\n\n\n\n\n","//import { mapToStyles } from '@popperjs/core/lib/modifiers/computeStyles';\n\n/**\n * Form class that ahs its own watchdog for tracking changes,\n * reseting to default values after changes, setting statuses\n * for inputs, populating selects from json, and more\n * \n * Selects and multiselects are based on virtual-select.js\n */\n\nexport default class JDSForm {\n\n    constructor(element, hasWatchdog = true) {\n        this.formInitialized = false;\n        this.formDisabled = false;\n        this.nativeElement = element;\n        this.submit = this.nativeElement.querySelector('button[type=\"submit\"]');\n        this.reset = this.nativeElement.querySelector('button.btn-reset[type=\"button\"]');\n        this.hasWatchdog = hasWatchdog;\n        this.formChanged = false;\n        this.jsonPopulatesIndex = 0;\n        this.formsMap = new Map();\n        this.selectGroups = new Map();\n        this.selectGroupsValues = new Map();\n        this.selects = [];\n        this.alwaysDisabledOptions = [];\n        this.formEls;\n\n        this.virtualSelectConf = {\n            placeholder: 'Bitte wählen',\n            noOptionsText: 'Keine Optionen',\n            noSearchResultsText: 'Keine Ergebnisse',\n            searchPlaceholderText: 'Suchen...',\n            allOptionsSelectedText: 'Alle',\n            optionsSelectedText: 'ausgewählt',\n            optionSelectedText: 'ausgewählt',\n            moreText: 'mehr...',\n            emptyValue: \"\",\n\n            search: true,\n            disableSelectAll: true,\n            silentInitialValueSet: true,\n            autoSelectFirstOption: false,\n            disableOptionGroupCheckbox: true,\n        };\n\n        this.init();\n    }\n\n    /**\n     * Init the form\n     */\n    init() {\n        this.submit.disabled = true;\n\n        if (this.reset)\n            this.reset.disabled = true;\n\n        this.initRegularSelects();\n        this.initJsonPopulators();\n\n        this.selects = this.nativeElement.querySelectorAll('.select-has-group');\n\n        this.selects.forEach(element => {\n            element.addEventListener('change', this.onSelectChange.bind(this.nativeElement));\n        });\n\n        this.nativeElement.selects = this.selects;\n        this.nativeElement.virtualSelectConf = this.virtualSelectConf;\n    }\n\n    /**\n     * Init group of selects with shared disabled options\n     */\n    initSelectGroupWatchdog() {\n        console.log('init form groups');\n\n        // create list of selected items\n        this.selects.forEach(element => {\n            this.setSelectedOptions(element);\n        });\n\n        // create list of original disabled items from DOM excluding selected options from this group\n        this.selects.forEach(element => {\n            element.permaDisabledOptions = [];\n\n            let disabledItems = element.getDisabledOptions();\n            let targetGroup = element.getAttribute('data-select-group');\n            let groupArray = this.selectGroupsValues.get(targetGroup);\n\n            disabledItems.forEach(item => {\n                if (groupArray.indexOf(item) < 0) {\n                    element.permaDisabledOptions.push(item);\n                }\n                //element.setAlwaysDisabledOptions(element.permaDisabledOptions);                \n            });\n\n            this.alwaysDisabledOptions = element.permaDisabledOptions;\n        });\n    }\n\n    /**\n     * Handles value change of a select/multiselect that are part of a group\n     * @param {Event} ev \n     */\n    onSelectChange(ev) {\n        let targetGroup = ev.target.getAttribute('data-select-group');\n        this.selectGroups.set(targetGroup, '');\n\n        // insert all values\n        this.selects.forEach(element => {\n            this.setSelectedOptions(element);\n        });\n\n        // then refresh disabled options\n        this.selects.forEach(element => {\n            this.setDisabledOptions(element);\n        });\n    }\n\n    /**\n     * Sets the selected values of the select/multiselect that are part of a group\n     * @param {HTMLElement} element \n     */\n    setSelectedOptions(element) {\n        let group = element.getAttribute('data-select-group');\n        let groupArray = this.selectGroups.get(group);\n        let groupArrayValues = this.selectGroupsValues.get(group);\n\n        if (groupArray && groupArray.length > 0) {\n            this.selectGroups.set(group, groupArray.concat([element.getSelectedOptions()]));\n            this.selectGroupsValues.set(group, groupArrayValues.concat([element.value]));\n        }\n        else {\n            this.selectGroups.set(group, [element.getSelectedOptions()]);\n            this.selectGroupsValues.set(group, [element.value]);\n        }\n    }\n\n    /**\n     * Sets the disabled options of the select/multiselect that are part of a group\n     * @param {HTMLElement} element \n     */\n    setDisabledOptions(element) {\n        let group = element.getAttribute('data-select-group');\n        let _disOptions = this.selectGroups.get(group);\n        let disOptions = _disOptions.concat();\n\n        for (var i = 0; i < disOptions.length; i++) {\n            disOptions[i] = disOptions[i] ? disOptions[i].value : '';\n        }\n\n        if (this.alwaysDisabledOptions && this.alwaysDisabledOptions.length > 0) {\n            element.setDisabledOptions(disOptions.concat(this.alwaysDisabledOptions), true);\n        }\n        else {\n            element.setDisabledOptions(disOptions, true);\n        }\n    }\n\n    /**\n     * Sets all options as enabled of the select/multiselect that are part of a group\n     */\n    setEnabledOptions() {\n        this.selects = this.querySelectorAll('.select-has-group');\n        this.selects.forEach(element => {\n            element.setEnabledOptions(true);\n        });\n    }\n\n    /**\n     * Inits Json populators, in case select/multiselect has external source\n     */\n    initJsonPopulators() {\n        var jsonElements = this.nativeElement.querySelectorAll('div[json-path]');\n\n        jsonElements.forEach(element => {\n            this.loadJson(element.getAttribute('json-path'), element.id, element.getAttribute('value'), jsonElements.length);\n        });\n\n        /* if (jsonElements.length > 0 && this.hasWatchdog) {\n        }\n        else if (this.hasWatchdog) {\n            this.initFormWatchdog();\n        } */\n\n\n        if (jsonElements.length <= 0 && this.hasWatchdog) {\n            this.initFormWatchdog();\n        }\n    }\n\n    /**\n     * Fetches the json data\n     * @param {string} dataurl \n     * @param {string} elID \n     * @param {string} currentValue \n     * @param {number} lengthToWait \n     */\n    loadJson(dataurl, elID, currentValue, lengthToWait) {\n        fetch(dataurl)\n            .then((response) => response.json())\n            .then((json) => this.initJsonSelect(json, elID, currentValue, lengthToWait));\n    }\n\n    /**\n     * Inits regular virtual-selects\n     */\n    initRegularSelects() {\n        let conf = Object.assign({\n            ele: 'select',\n            additionalClasses: 'regular-select',\n        }, this.virtualSelectConf);\n\n        VirtualSelect.init(conf);\n    }\n\n    /**\n     * Inits json populated virtual-select after the data has been fetched.\n     * It checks if all json virtual-selects are done and then finally\n     * initializes the form watchdog\n     * @param {json} jsonData \n     * @param {string} id \n     * @param {string} value \n     * @param {number} lengthToWait \n     */\n    initJsonSelect(jsonData, id, value, lengthToWait) {\n        let conf = Object.assign({\n            ele: '#' + id,\n            options: jsonData,\n            //selectedValue: value.replaceAll(\" \", \"\").split(','),\n            selectedValue: value.replace(/ /g, \"\").split(','),\n        }, this.virtualSelectConf);\n\n        VirtualSelect.init(conf);\n\n        if (++this.jsonPopulatesIndex == lengthToWait && this.hasWatchdog) {\n            this.watchdogEnabled = true;\n            this.initFormWatchdog();\n        }\n    }\n\n    /**\n     * Inits the watchdog to track changes of the elements inside the form\n     * after storing default values and setting up event listeners on all elements\n     */\n    initFormWatchdog() {\n        var wdForm = this.nativeElement;\n        this.formEls = wdForm.querySelectorAll('input:not([type=\"submit\"]):not(.vscomp-search-input):not(#dseHidden):not(.radioimage-radio), textarea, select, .radioimages');\n        this.formEls.forEach(formEl => {\n\n            if (formEl.tagName.toLowerCase() === 'input' && formEl.getAttribute('type') === 'checkbox') {\n                this.formsMap.set(formEl.getAttribute('name'), formEl.checked);\n            }\n            else {\n                if (formEl.hasAttribute('original-data')) {\n                    this.formsMap.set(formEl.getAttribute('name'), formEl.getAttribute('original-data'));\n                }\n                else if (formEl.value) {\n                    this.formsMap.set(formEl.getAttribute('name'), formEl.value);\n                }\n                else {\n                    this.formsMap.set(formEl.getAttribute('name'), formEl.getAttribute('value'));\n                }\n            }\n\n            //console.log(this.formsMap);\n\n            /**\n             * Sets a function to check for simple validacy of field (empty or not empty).\n             * More complex validation happens via ajax calls, if the input element has\n             * that HTML property declared (please refer to input_element.php snippet)\n             * @returns {string}\n             */\n            formEl.fieldValid = function () {\n                var response = 'neutral';\n                let label = document.querySelector('label[for=\"' + this.name + '\"]');\n\n                if (label) {\n                    if (label.classList.contains('is-required') && this.value == '') {\n                        var response = 'error';\n                    }\n                    else if (this.value != '') {\n                        var response = 'valid';\n                    }\n                }\n\n                return response;\n            };\n\n            // sets initial icon for valid, not valid, or warning \n            this.setElementCheck(this.nativeElement, formEl);\n\n            let eventTarg = this.nativeElement.querySelector('#' + formEl.getAttribute('name'));\n\n            // add listeners for validation and change tracking to the element\n            // depending if its a div or actual input\n            if (eventTarg.tagName == 'DIV') {\n                eventTarg.addEventListener('change', function (ev) {\n\n                    let input = ev.target.querySelector('input');\n                    if (ev.currentTarget.classList.contains('radioimages')) {\n                        input = ev.currentTarget;\n                        ev.currentTarget.resetRadioGroup = function (val) {\n                            let radios = this.querySelectorAll('input');\n\n                            radios.forEach(element => {\n                                if (element.value != val)\n                                    element.checked = false;\n                                else\n                                    element.checked = true;\n                            });\n                        }\n                    }\n                    if (ev.target.value != this.formsMap.get(ev.target.getAttribute('name'))) {\n                        this.setElementChanged(this.nativeElement, input);\n                    }\n                    else {\n                        this.unsetElementChanged(input);\n                    }\n                    this.setElementCheck(this.nativeElement, input);\n\n                }.bind(this));\n            }\n            else {\n                eventTarg.addEventListener('input', function (ev) {\n                    if (ev.target.value != this.formsMap.get(ev.target.id)) {\n                        this.setElementChanged(this.nativeElement, ev.target);\n                    }\n                    else {\n                        this.unsetElementChanged(ev.target);\n                    }\n                    this.setElementCheck(this.nativeElement, ev.target);\n\n                }.bind(this));\n            }\n\n        });\n\n        // form is done initializing\n        this.formInitialized = true;\n\n        // bind some class functions and properties to native element\n        this.bindToDOMElement();\n    }\n\n    /**\n     * Sets icon for valid, not valid, or warning\n     * @param {HTMLElement} scope // function gets called inside class or on native element\n     * @param {HTMLElement} el // input element to be handled\n     */\n    setElementCheck(scope, el) {\n        if (el) {\n            let inputTarget = scope.querySelector('#' + el.getAttribute('name'));\n            let ajaxHandler = inputTarget.getAttribute('data-ajax-handler');\n\n            // if element has ajax handler for validation, call that function instead\n            // of the simple one here below\n            if (inputTarget && ajaxHandler) {\n                if (ajaxHandler) {\n                    window[ajaxHandler](inputTarget);\n                }\n            } else {\n                let check = scope.querySelector('.checks[data-for=\"' + el.name + '\"]');\n                let error = scope.querySelector('.errors[data-for=\"' + el.name + '\"]');\n                let input = scope.querySelector('#' + el.name);\n\n                if (input && error && check) {\n                    if (el.fieldValid() == 'valid') {\n                        error.classList.add('d-none');\n                        check.classList.remove('d-none');\n                        input.classList.add('filled');\n                    }\n                    else if (el.fieldValid() == 'error') {\n                        error.classList.remove('d-none');\n                        check.classList.add('d-none');\n                        input.classList.remove('filled');\n                    }\n                    else {\n                        error.classList.add('d-none');\n                        check.classList.add('d-none');\n                        input.classList.remove('filled');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets an attribute change for element and dispatches an event\n     * for other pieces of code to handle an input change. It also\n     * updates the form overall change-status\n     * @param {HTMLElement} el \n     */\n    setElementChanged(scope, el) {\n        if (el) {\n            let inputTarget = scope.querySelector('#' + el.getAttribute('name'));\n            let changeHandler = inputTarget.getAttribute('data-change-handler');\n\n            if (inputTarget && changeHandler) {\n                if (changeHandler) {\n                    window[changeHandler](inputTarget);\n                }\n            }\n\n            el.setAttribute('statusChanged', '');\n            this.updateFormStatus();\n        }\n\n        document.dispatchEvent(new CustomEvent('current_form', { detail: { context: this.nativeElement } }));\n    }\n\n    /**\n     * Removes the status change form the element, meaning it has original value (again)\n     * and updates form overall change-status\n     * @param {HTMLElement} el \n     */\n    unsetElementChanged(el) {\n        if (el) {\n            el.removeAttribute('statusChanged');\n            this.updateFormStatus();\n        }\n    }\n\n    /**\n     * Updates the form status by checking the status of all elements inside.\n     * Dispatches an event if the form was changed for other pieces of code\n     * to handle changes in the form\n     */\n    updateFormStatus() {\n        let formChanged = false;\n        this.formEls.forEach(formEl => {\n            let status = formEl.hasAttribute('statusChanged');\n            formChanged = formChanged || status;\n        });\n\n        this.formChanged = formChanged;\n\n        if (this.nativeElement) {\n            this.nativeElement.formChanged = this.formChanged;\n            this.nativeElement.setAttribute('form_changed', this.formChanged);\n        }\n\n        this.submit.disabled = !this.formChanged;\n        if (this.reset)\n            this.reset.disabled = !this.formChanged;\n\n        let containerpane = window.findParentContainer(this.nativeElement ? this.nativeElement.parentNode : this.parentNode, 'tab-pane');\n        document.dispatchEvent(new CustomEvent('form_changed', { detail: { paneID: containerpane.id, state: this.formChanged } }));\n    }\n\n    /**\n     * Enables all form elements and the form\n     */\n    enableForm() {\n        this.formEls.forEach(formEl => {\n            let eventTarg = this.querySelector('#' + formEl.getAttribute('name'));\n\n            if (eventTarg.classList.contains('vscomp-ele')) {\n                if (!eventTarg.classList.contains('force-disabled')) {\n                    eventTarg.enable();\n                }\n            }\n            else {\n                if (!formEl.classList.contains('force-disabled')) {\n                    formEl.disabled = false;\n                }\n            }\n        });\n\n        this.formDisabled = false;\n    }\n\n    /**\n     * Disables all form elements and the form\n     */\n    disableForm() {\n        this.formEls.forEach(formEl => {\n            let eventTarg = this.querySelector('#' + formEl.getAttribute('name'));\n\n            if (eventTarg.classList.contains('vscomp-ele')) {\n                if (!eventTarg.classList.contains('force-disabled')) {\n                    eventTarg.disable();\n                }\n            }\n            else {\n                if (!eventTarg.classList.contains('force-disabled')) {\n                    formEl.disabled = true;\n                }\n            }\n        });\n\n        this.formDisabled = true;\n    }\n\n    /**\n     * Resets the element to the default values\n     * @param {HTMLElement} el \n     */\n    resetElement(element) {\n        if (typeof element == 'string')\n            element = document.querySelector('input[name=\"' + element + '\"');\n\n        let val = this.formsMap.get(element.getAttribute('name'));\n\n        if (element.classList.contains('vscomp-hidden-input')) {\n            let form = element.form;\n            let el = form.querySelector('#' + element.getAttribute('name'));\n            el.setValue(val.split(','), true);\n        }\n        else if (element.classList.contains('radioimages')) {\n            element.value = val;\n            element.resetRadioGroup(val);\n        }\n        else if (this.tagName.toLowerCase() === 'input' && element.getAttribute('type') === 'checkbox') {\n            element.checked = val;\n        }\n        else {\n            element.value = val;\n        }\n\n        this.setElementCheck(this, element);\n        element.removeAttribute('statusChanged');\n\n        this.updateFormStatus();\n    }\n    /**\n     * Resets the form to default values and removes all status changes\n     */\n    resetToDefault() {\n        if (this.formChanged) {\n\n            this.selectGroups = new Map();\n            this.selectGroupsValues = new Map();\n\n            this.setEnabledOptions();\n\n            this.formEls.forEach(formEl => {\n                this.resetElement(formEl);\n                /* let val = this.formsMap.get(formEl.getAttribute('name'));\n\n                if (formEl.classList.contains('vscomp-hidden-input')) {\n                    let form = formEl.form;\n                    let el = form.querySelector('#' + formEl.getAttribute('name'));\n                    el.setValue(val.split(','), true);\n                }\n                else if (formEl.classList.contains('radioimages')) {\n                    formEl.value = val;\n                    formEl.resetRadioGroup(val);\n                }\n                else if (formEl.tagName.toLowerCase() === 'input' && formEl.getAttribute('type') === 'checkbox') {\n                    formEl.checked = val;\n                }\n                else {\n                    formEl.value = val;\n                }\n\n                this.setElementCheck(this, formEl);\n                formEl.removeAttribute('statusChanged'); */\n            });\n\n            this.formChanged = false;\n            this.setAttribute('form_changed', false);\n            this.submit.disabled = true;\n\n            if (this.reset)\n                this.reset.disabled = true;\n        }\n\n        let containerpane = window.findParentContainer(this.parentNode, 'tab-pane');\n        document.dispatchEvent(new CustomEvent('form_changed', { detail: { paneID: containerpane.id, state: this.formChanged } }));\n    }\n\n\n    /**\n     * Binds some class functions and properties to the native element\n     */\n    bindToDOMElement() {\n\n        this.nativeElement.resetToDefault = this.resetToDefault;\n        this.nativeElement.initSelectGroupWatchdog = this.initSelectGroupWatchdog;\n        this.nativeElement.setSelectedOptions = this.setSelectedOptions;\n        this.nativeElement.setDisabledOptions = this.setDisabledOptions;\n        this.nativeElement.setEnabledOptions = this.setEnabledOptions;\n        this.nativeElement.onSelectChange = this.onSelectChange;\n        this.nativeElement.setElementCheck = this.setElementCheck;\n        this.nativeElement.disableForm = this.disableForm;\n        this.nativeElement.enableForm = this.enableForm;\n        this.nativeElement.resetElement = this.resetElement;\n        this.nativeElement.updateFormStatus = this.updateFormStatus;\n        //this.nativeElement.findParentContainer = this.findParentContainer;\n\n        this.nativeElement.formInitialized = this.formInitialized;\n        this.nativeElement.formDisabled = this.formDisabled;\n        this.nativeElement.selectGroups = this.selectGroups;\n        this.nativeElement.selectGroupsValues = this.selectGroupsValues;\n        this.nativeElement.formEls = this.formEls;\n        this.nativeElement.formsMap = this.formsMap;\n        this.nativeElement.formChanged = this.formChanged;\n        this.nativeElement.submit = this.submit;\n        this.nativeElement.reset = this.reset;\n        //this.nativeElement.selects = this.selects;\n    }\n\n\n}\n\n\n","/**\n * Handles all forms in pages and inside tabs\n * and also some form elements\n */\n\n\nimport DragnDrop from \"../components/DragnDrop\";\nimport JDSForm from \"../components/JDSForm\";\n\n\n/**\n * Init all forms that have a change watchdog\n */\nexport function initForms() {\n\n    let watchdog_forms = document.querySelectorAll('.watchdog__form');\n    watchdog_forms.forEach(element => {\n        element = new JDSForm(element);\n    });\n\n    initFormTracking();\n    initPinInputs();\n    initDnDForms();\n}\n\n\nlet current_form;\n/**\n * Tracks which form is currently active,\n * if it has been change and save via keyboard (ctrl + s)\n */\nfunction initFormTracking() {\n    // waits for current form event\n    document.addEventListener(\"current_form\", (event) => {\n        current_form = event.detail.context;\n    }, true);\n\n    // if ctrl+s and form was changed, save form\n    document.addEventListener(\"keydown\", function (e) {\n        if ((window.navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey) && e.keyCode == 83) {\n            e.preventDefault();\n\n            if (current_form && current_form.getAttribute('form_changed') == 'true') {\n                sendAjaxForm(current_form.id);\n            }\n        }\n    }, false);\n\n    // waits for form changed event\n    document.addEventListener(\"form_changed\", (event) => {        \n        let formUnsaved = event.detail.state;\n        let paneId = event.detail.paneID;\n        let tab = document.querySelector('button[aria-controls=\"'+paneId+'\"]');\n\n        if(formUnsaved){\n            tab.classList.add('unsaved');\n        }\n        else{\n            tab.classList.remove('unsaved');\n        }        \n    }, true);\n}\n\n/**\n * Inits the form in the current container\n * @param {HTMLElement} container \n */\nexport function initFormOnShow(container) {\n    let forms = container.querySelectorAll('form.dynamic-content.watchdog__form');\n    forms.forEach(form => {\n        form.initSelectGroupWatchdog();\n    });\n}\n\n/**\n * Resets all forms to its defaults, if they were changed\n * @param {HTMLElement} container   e.g. a tab-pane or modal\n */\nexport function resetForms(container) {\n    let forms = container.querySelectorAll('form.watchdog__form');\n    forms.forEach(form => {\n        form.resetToDefault();\n    });\n}\n\n/**\n * Checks if some forms were changed and return result + amount\n * @param {HTMLElement} container   e.g. a tab-pane or modal\n * @returns {boolean}\n */\nexport function checkForms(container) {\n    let forms = container.querySelectorAll('form.watchdog__form');\n    let changed = 0;\n    let statusChanged = false;\n\n    forms.forEach(form => {\n        if (form.formChanged) {\n            changed++;\n        }\n        statusChanged = statusChanged || form.formChanged;\n    });\n\n    var result = {\n        changed: changed,\n        statusChanged: statusChanged,\n    };\n\n    return result;\n}\n\n/**\n * Disables all forms in the container\n * @param {HTMLElement} container  e.g. a tab-pane or modal\n */\nexport function disableForms(container) {\n    let forms = container.querySelectorAll('form.watchdog__form');\n\n    forms.forEach(element => {\n        element.disableForm();\n    });\n}\n\n/**\n * Enables all forms in the container\n * @param {HTMLElement} container  e.g. a tab-pane or modal\n */\nexport function enableForms(container) {\n    let forms = container.querySelectorAll('form.watchdog__form');\n\n    forms.forEach(element => {\n        if (element.formInitialized)\n            element.enableForm();\n    });\n}\n\nlet pinForms;\n\n/**\n * Inits 4-digit forms that auto focus sibling elements\n */\nfunction initPinInputs() {\n    pinForms = document.querySelectorAll('.pin__form');\n\n    pinForms.forEach(pinform => {\n        let inputs = pinform.querySelectorAll('.field__pin');\n        let hasAutoFocus = pinform.classList.contains('autofocus');\n\n        inputs.forEach((input, key) => {\n\n            if (hasAutoFocus) {\n                inputs[0].focus();\n            }\n\n            input.addEventListener(\"keyup\", function (event) {\n                if (event.keyCode == 8 || event.key === \"Backspace\" || event.key === \"Delete\" || event.keyCode == 37) {\n                    if (key > 0) {\n                        inputs[key - 1].focus();\n                        inputs[key - 1].select();\n                    }\n                    return;\n                }\n                \n                if (input.value || event.keyCode == 39) {                      \n                    if (key === (inputs.length - 1)) {\n                        let submit = this.form.querySelector('input[type=\"submit\"]');\n                        submit.focus();\n                    } else {\n                        inputs[key + 1].focus();\n                        inputs[key + 1].select();\n                    }\n                }\n            });\n        });\n    });\n}\n\n/**\n * Inits Drag n Drop forms\n */\nfunction initDnDForms() {\n    let dndForms = document.querySelectorAll('.upload-form');\n\n    dndForms.forEach(element => {\n        new DragnDrop(element);\n    });\n}\n\n\n","import { initForms, resetForms, checkForms, enableForms, disableForms, initFormOnShow } from './controllers/forms';\n\nconst cross_data = document.querySelector('#cross-data');\nconst page_id = cross_data.getAttribute('page-slug');\n\n/**\n * inits the admin logic in the relevant page\n */\nfunction initAdmin() {\n    console.log('init admin');\n\n    initForms();\n    initBSElements();\n    rehashUrl();\n}\nObject.assign(window, { initAdmin });\n\n\nlet url;\n/**\n * Places a hash after a refresh so we jump to the right bootstrap tab\n */\nfunction rehashUrl() {\n    url = location.href.replace(/\\/$/, \"\");\n\n    if (location.hash) {\n        const hash = url.split(\"#\");\n        let triggerEl = document.querySelector('button[data-bs-target=\"#' + hash[1] + '\"]');\n\n        if (triggerEl) {\n            const tabTrigger = new Tab(triggerEl);\n            tabTrigger.show();\n            url = location.href.replace(/\\/#/, \"#\");\n\n            let forms = document.querySelectorAll('form');\n            forms.forEach(element => {\n                element.setAttribute('action', url);\n            });\n\n            history.replaceState(null, null, url);\n        }\n\n        setTimeout(() => {\n            window.scrollTo(0, 0);\n        }, 100);\n    }\n}\n\n/**\n * Handles the confirm button of dynamic modals\n * @param {Event} ev \n */\nfunction defaultModalHandler(ev) {\n    let btn_confirm = ev.target;\n    let context = document.querySelector(btn_confirm.getAttribute('context')) ?? window;\n    executeFunctionByName(btn_confirm.getAttribute('callback'), context, btn_confirm.getAttribute('data'));\n\n    confirmationModal.hide();\n}\n\n/**\n * Handles the cancel button of dynamic modals\n * @param {Event} ev \n */\nfunction defaultModalCancelHandler(ev) {\n    let btn_cancel = ev.target;\n    let context = document.querySelector(btn_cancel.getAttribute('context-cancel')) ?? window;\n    executeFunctionByName(btn_cancel.getAttribute('callback-cancel'), context, btn_cancel.getAttribute('data-cancel'));\n\n    confirmationModal.hide();\n}\n\n/**\n * Calls a function by its name in the given context and passes an argument\n * @param {string} functionName \n * @param {HTMLElement} context \n * @param {string} args \n * @returns mixed\n */\nfunction executeFunctionByName(functionName, context, args) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for (var i = 0; i < namespaces.length; i++) {\n        context = context[namespaces[i]];\n    }\n    return context[func].apply(context, args);\n}\n\n/**\n * Resets a form inside a tab after changes were made\n * @param {string} data \n */\nfunction resetFormModal(data) {\n    let tabActiveEl = document.querySelector('button[data-bs-toggle=\"tab\"].active');\n    let tabPane = tabActiveEl.getAttribute('data-bs-target');\n    resetForms(document.querySelector(tabPane));\n}\nObject.assign(window, { resetFormModal });\n\n/**\n * Triggers a confirm-modal after changes were made in\n * a tab and the changes were not saved\n * @param {string} data \n */\nfunction handleChangedFormModal(data) {\n    // reset form\n    let tabActiveEl = document.querySelector('button[data-bs-toggle=\"tab\"].active');\n    let tabPane = tabActiveEl.getAttribute('data-bs-target');\n    resetForms(document.querySelector(tabPane));\n\n    let triggerEl = document.querySelector('button[data-bs-target=\"' + data + '\"]');\n    const tabTrigger = new Tab(triggerEl);\n    tabTrigger.show();\n}\nObject.assign(window, { handleChangedFormModal });\n\n\nlet confirmationModal;\nlet confirmationModalEl = document.getElementById('confirmationModal');\nif (confirmationModalEl) {\n    confirmationModal = new Modal('#confirmationModal');\n}\n\nconst CHANGED_FORM_MODAL = 'handleChangedFormModal';\n/**\n * Inits the bootstrap elements, specially tabs and modals and sets some event listeners\n */\nfunction initBSElements() {\n\n    /** TAB TOGGLES ***/\n    console.log('init bs');\n    // event listener for tab exhibition; when it is done, handle locking\n    document.addEventListener('done_fetching_information', handleCurrentActiveForm, true);\n\n    // bootstrap toggles are 'tab buttons'\n    let toggles = document.querySelectorAll('button[data-bs-toggle=\"tab\"]');\n    toggles.forEach(element => {\n        // tab is shown\n        element.addEventListener(\"shown.bs.tab\", async function (ev) {\n            let newUrl;\n            const hash = this.getAttribute(\"data-bs-target\");\n            // workaround for home and stripping of hash\n            if (hash == \"#home\") {\n                newUrl = url.split(\"#\")[0];\n            } else {\n                newUrl = url.split(\"#\")[0] + hash;\n            }\n\n            let forms = document.querySelectorAll('form');\n            forms.forEach(element => {\n                element.setAttribute('action', newUrl);\n            });\n            history.replaceState(null, null, newUrl);\n\n            /* if the tab for exhibition is being called, fetch eventual changes\n            made to the exhibition by someone else and refresh the tab, then\n            re-init the form inside. curators have the exhibition inside a tab.*/\n            let tabPaneID = ev.target.getAttribute('data-bs-target');\n            let tabPane = document.querySelector(tabPaneID);\n\n            if (tabPane.id == 'pane-exhibition') {\n                fetchDynamicExhibitionData(tabPane);\n                initFormOnShow(tabPane);\n            }\n        });\n        // last tab is going to change to new tab\n        element.addEventListener(\"hide.bs.tab\", async function (ev) {\n            let tabPaneID = ev.target.getAttribute('data-bs-target');\n            let tabPane = document.querySelector(tabPaneID);\n            let tabFormsCheck = checkForms(tabPane);\n            let destinationTab = ev.relatedTarget.getAttribute('data-bs-target');\n\n            // check if old tab has unsaved changes\n            if (tabFormsCheck.statusChanged) {\n                // if yes prevent from changing and trigger confirmation modal\n                ev.preventDefault();\n                createPhantomToggle({\n                    headline: 'Achtung',\n                    message: 'Einige Änderungen wurden nicht gespeichert. Änderungen verwerfen?',\n                    func: CHANGED_FORM_MODAL,\n                    data: destinationTab,\n                    confirmLabel: 'Verwerfen',\n                });\n            }\n            else {\n                /* if not then just do nothing except if it was the exhibition\n                 tab, in this case we have to unlock it. curators have exhibitions\n                 inside a tab*/\n                if (tabPane.id == 'pane-exhibition') {\n                    handleLastActiveForm(tabPane);\n                }\n            }\n        });\n    });\n\n    // bs modals\n    let modals = document.querySelectorAll('.modal');\n    modals.forEach(element => {\n        /* when it hides reset the forms inside and eventually\n        unlock the page that was being edited via that form*/\n        element.addEventListener('hidden.bs.modal', event => {\n            resetForms(event.target);\n            handleLastActiveForm(event.target);\n        });\n\n        /* fetch some new information in case the page was being\n        edited by someone else (exhibition) and re-init the forms.\n        curator leader have exhibitions in modals. Do this only\n        if it was not a confirmation modal*/\n        element.addEventListener('show.bs.modal', event => {\n            if (event.target.id != 'confirmationModal') {\n                fetchDynamicExhibitionData(event.target);\n                initFormOnShow(event.target);\n            }\n        });\n    });\n\n    // logic for confirmation modal\n    if (confirmationModalEl) {\n        confirmationModalEl.addEventListener('show.bs.modal', event => {\n            // Button that triggered the modal\n            const button = event.relatedTarget;\n            // Extract info from data-bs-* attributes\n            let headline;\n            let message;\n            let context;\n            let contextCancel;\n            let func;\n            let funcCancel;\n            let data;\n            let dataCancel;\n            let confirmLabel;\n            let cancelLabel;\n\n            if (button) {\n                headline = button.getAttribute('data-bs-headline');\n                message = button.getAttribute('data-bs-message');\n                context = button.getAttribute('data-bs-context');\n                contextCancel = button.getAttribute('data-bs-context-cancel');\n                func = button.getAttribute('data-bs-func');\n                funcCancel = button.getAttribute('data-bs-func-cancel');\n                data = button.getAttribute('data-bs-data');\n                dataCancel = button.getAttribute('data-bs-data-cancel');\n                confirmLabel = button.getAttribute('data-bs-confirm-label');\n                cancelLabel = button.getAttribute('data-bs-cancel-label');\n            }\n\n            // Update the modal's content.\n            const modalTitle = confirmationModalEl.querySelector('.modal-title');\n            const modalBodyMessage = confirmationModalEl.querySelector('.modal-body p');\n            const modalBtnConfirm = confirmationModalEl.querySelector('button.modal-confirm');\n            const modalBtnCancel = confirmationModalEl.querySelector('button.modal-cancel');\n\n            if (headline)\n                modalTitle.textContent = headline;\n            if (message)\n                modalBodyMessage.innerHTML = message;\n            if (context)\n                modalBtnConfirm.setAttribute('context', context);\n            if (func)\n                modalBtnConfirm.setAttribute('callback', func);\n            if (data)\n                modalBtnConfirm.setAttribute('data', data);\n            if (contextCancel)\n                modalBtnCancel.setAttribute('context-cancel', contextCancel);\n            if (funcCancel)\n                modalBtnCancel.setAttribute('callback-cancel', funcCancel);\n            if (dataCancel)\n                modalBtnCancel.setAttribute('data-cancel', dataCancel);\n            if (confirmLabel)\n                modalBtnConfirm.innerHTML = confirmLabel;\n            if (cancelLabel)\n                modalBtnCancel.innerHTML = cancelLabel;\n\n            // set the dynamic callbacks to be triggered\n            modalBtnConfirm.addEventListener('click', defaultModalHandler);\n            modalBtnCancel.addEventListener('click', defaultModalCancelHandler);\n        });\n    }\n\n    // init tooltips for status      \n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new Tooltip(tooltipTriggerEl, { container: 'body', html: true }));\n}\n\n/**\n * Prepares the form that is going to be edited (specially unlocking that page)\n * Mainly relevant for exhibitions, since many people can edit them.\n * @param {mixed} targetElement \n */\nasync function handleCurrentActiveForm(targetElement) {\n\n    // dynamicinit function from indexjs\n    dynamicInit();\n\n    //reinit tooltips for this form\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new Tooltip(tooltipTriggerEl, { container: 'body' }));\n\n    // check if targetElement was an Event and if not that means it was an HTMLElement\n    // and we retrieve the element from the .detail from the CustomEvent (see ajax-functions.js)\n    if (targetElement.target) {\n        targetElement = targetElement.detail.context;\n    }\n    // there is a possiblity, that the user was removed from the exhibition, so we check for that\n    if (!targetElement.classList.contains('user-removed')) {\n        const pageToLock = targetElement.getAttribute(\"data-pageid\");\n\n        if (pageToLock) {\n            let _path = location.protocol + '//' + location.host + location.pathname + '.json?lockMe=' + pageToLock;\n            console.log(_path);\n            try {\n                const response = await fetch(_path);\n                const { lockactionstatus, lockedBy, overlayCode } = await response.json();\n\n                if (lockactionstatus == 'already_locked') {\n                    //console.log('WAS ALREADY Locked by ' + lockedBy);\n                    disableForms(targetElement);\n                    targetElement.setAttribute('blocked-by', lockedBy);\n\n                    targetElement.classList.add('blocked');\n\n                    let overlay_container = targetElement.querySelector('.overlay_container');\n                    overlay_container.innerHTML = overlayCode;\n                }\n                else {\n                    enableForms(targetElement);\n                    targetElement.setAttribute('blocked-by', page_id);\n                    targetElement.classList.remove('blocked');\n\n                    let overlay_container = targetElement.querySelector('.overlay_container');\n                    if (overlay_container) {\n                        overlay_container.innerHTML = '';\n                    }\n                }\n            }\n            catch (error) {\n                console.log('Fetch error: ', error);\n            }\n        }\n    }\n}\n\n/**\n * Does some cleanup in the form that was edited (specially unlocking that page)\n * Mainly relevant for exhibitions, since many people can edit them.\n * @param {HTMLElement} targetElement \n */\nasync function handleLastActiveForm(targetElement) {\n    const pageToUnlock = targetElement.getAttribute(\"data-pageid\");\n\n    if (pageToUnlock) {\n        let isBlockedBy = targetElement.getAttribute('blocked-by');\n        let blockedParam = isBlockedBy != null ? '&blockedBy=' + isBlockedBy : '';\n        let _path = location.protocol + '//' + location.host + location.pathname + '.json?unlockMe=' + pageToUnlock + blockedParam;\n        console.log(_path);\n        try {\n            const response = await fetch(_path);\n            const { lockactionstatus, lockedBy } = await response.json();\n\n            if (lockactionstatus == 'was_already_locked') {\n                //console.log('IS STILL ALREADY Locked by ' + lockedBy);\n            }\n            else {\n                if (page_id == lockedBy || !lockedBy) {\n                    targetElement.setAttribute('blocked-by', '');\n                }\n            }\n        }\n        catch (error) {\n            console.log('Fetch error: ', error);\n        }\n    }\n}\n\n/**\n * createPhantomToggle\n * creates a virutal button to trigger a bootstrap model\n * that then reads the information passed and dynamically\n * sets the content and callback functions.\n * @param {Object} data \n */\nfunction createPhantomToggle(data) {\n    let phantomToggle = document.createElement(\"button\");\n    phantomToggle.setAttribute('data-bs-headline', data.headline ?? '');\n    phantomToggle.setAttribute('data-bs-message', data.message ?? '');\n    phantomToggle.setAttribute('data-bs-context', data.context ?? '');\n    phantomToggle.setAttribute('data-bs-func', data.func ?? '');\n    phantomToggle.setAttribute('data-bs-data', data.data ?? '');\n    phantomToggle.setAttribute('data-bs-context-cancel', data.contextCancel ?? '');\n    phantomToggle.setAttribute('data-bs-func-cancel', data.funcCancel ?? '');\n    phantomToggle.setAttribute('data-bs-data-cancel', data.dataCancel ?? '');\n    phantomToggle.setAttribute('data-bs-confirm-label', data.confirmLabel ?? 'Bestätigen');\n    phantomToggle.setAttribute('data-bs-cancel-label', data.cancelLabel ?? 'Abbrechen');\n    confirmationModal.show(phantomToggle);\n}\nObject.assign(window, { createPhantomToggle });\n\ninitAdmin();\n\n\n\n"],"mappings":"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"}