{"version":3,"names":["createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","constructor","this","_listeners","_filters","pswp","undefined","options","addFilter","name","fn","priority","push","sort","f1","f2","removeFilter","filter","applyFilters","args","forEach","apply","on","off","listener","dispatch","details","event","type","defaultPrevented","Object","assign","preventDefault","call","parsePaddingOption","prop","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","panAreaSize","elementSize","fit","fill","vFill","initial","secondary","max","min","update","maxWidth","maxHeight","x","y","hRatio","vRatio","Math","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","currZoomLevel","lazyLoadData","instance","content","createContentFromData","zoomLevel","ZoomLevel","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","getViewportSize","getPanAreaSize","lazyLoad","setDisplayedSize","ceil","Eventable","getNumItems","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","data","element","placeholder","slide","displayedImageWidth","displayedImageHeight","isAttached","hasSlide","isDecoding","state","src","removePlaceholder","keepPlaceholder","setTimeout","destroy","load","isLazy","reload","usePlaceholder","placeholderEl","parentElement","container","prepend","placeholderSrc","msrc","isFirstSlide","imageSrc","imgEl","decoding","alt","setAttribute","transformOrigin","transform","scale","propValue","toTransformString","parentNode","remove","isImageContent","loadImage","innerHTML","html","updateContentSize","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","isActive","heavyAppended","append","displayError","isError","isLoading","isInitialSizeUpdate","isZoomable","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","innerText","errorMsg","supportsDecode","decode","catch","finally","appendImage","activate","holderElement","deactivate","getItemData","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","PhotoSwipeBase","super","_uid","shouldOpen","_preloadedContent","onThumbnailsClick","bind","init","gallerySelector","addEventListener","e","button","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","onLine","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","loadAndOpen","getClickedIndexFn","clickedTarget","clickedChildIndex","findIndex","child","contains","initialPointerPos","preload","promiseArray","pswpModuleType","pswpModule","prototype","goTo","Promise","resolve","Error","openPromise","preloadFirstSlide","lazyLoadSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","removeEventListener","equalizePoints","p1","p2","id","roundPoint","p","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","setTransform","defaultCSSEasing","setTransitionStyle","duration","ease","transition","supportsPassive","defineProperty","get","DOMEvents","_pool","add","target","passive","_toggleListener","removeAll","poolItem","unbind","skipPool","methodName","split","eType","eventOptions","PanBounds","center","_updateAxis","reset","axis","elSize","correctPan","panOffset","Slide","currIndex","currentResolution","pan","opener","isOpen","getContentBySlide","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","calculateSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","resize","panTo","force","scaleMultiplier","sizeChanged","getPlaceholderElement","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","display","canBeSwiped","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","UIElement","elementHTML","isButton","toLowerCase","title","ariaLabel","ariaText","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","preloaderDelay","ui","counterIndicator","counterElement","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","_lastUpdatedZoomLevel","a","b","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","Placeholder","Content","ContentLoader","limit","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","removeByIndex","indexToRemove","item","find","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","next","prev","refreshSlideContent","slideIndex","potentialHolderIndex","holder","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","model","model_progress","largeImg","updateProgress","ev","detail","totalProgress","modelLoaded","modelInteracted","autoRotate"],"sources":["../../../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../../../node_modules/photoswipe/dist/photoswipe.esm.js","../../../../src/js/templates/c_exhibit.js"],"sourcesContent":["/*!\n  * PhotoSwipe Lightbox 5.3.7 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nfunction specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nfunction isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} dataSource\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\n\nexport { PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","/*!\n  * PhotoSwipe 5.3.7 - https://photoswipe.com\n  * (c) 2023 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nfunction specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","import PhotoSwipeLightbox from '../../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js';\nimport PhotoSwipe from '../../../node_modules/photoswipe/dist/photoswipe.esm';\n\nlet model;\nlet model_progress;\nlet largeImg;\n\n/**\n * Inits the exhibit page depending on existing data\n */\nfunction init() {\n    model = document.querySelector('model-viewer');\n    largeImg = document.querySelector('#gallery');\n\n    if (model)\n        init3DLogic(); \n\n    if (largeImg)\n        initLargeImage();\n}\n\n/**\n * Inits logic for handling loading of 3D model \n */\nfunction init3DLogic() {\n    model = document.querySelector('model-viewer');\n    model_progress = model.querySelector('.viewer-progress');\n    model.addEventListener('load', modelLoaded);\n    model.addEventListener('progress', updateProgress);\n}\n\n/**\n * Updates the loading progress of the 3D model\n * @param {Event} ev \n */\nfunction updateProgress(ev) {\n    model_progress.style.width = ev.detail.totalProgress * 100 + '%';\n}\n\n/**\n * Starts and removes relevant listeners after model loaded\n * @param {Event} ev \n */\nfunction modelLoaded(ev) {\n    model_progress.style.width = 100 + '%';\n    model_progress.classList.add('loaded');\n\n    model.removeEventListener('load', modelLoaded);\n    model.removeEventListener('progress', updateProgress);\n    model.addEventListener('camera-change', modelInteracted);\n}\n\n/**\n * After first interaction with 3D model, it deactivates the\n * auto-rotation of the model\n * @param {Event} ev \n */\nfunction modelInteracted(ev) {\n    model.removeEventListener('camera-change', modelInteracted);\n    model.autoRotate = false;\n}\n\n/**\n * Inits large image as a PhotoSwipeLightbox so the\n * user can scale the image\n */\nfunction initLargeImage() {\n    const lightbox = new PhotoSwipeLightbox({\n        // may select multiple \"galleries\"\n        gallery: '#gallery',\n\n        // Elements within gallery (slides)\n        children: 'a',\n        pswpModule: PhotoSwipe,\n    });\n    lightbox.init();\n}\n\ninit();\n"],"mappings":"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"}